package bitcamp.pms.context;

import java.io.File;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;

import bitcamp.pms.annotation.Component;

public class ApplicationContext {
  HashMap<String,Object> objPool = new HashMap<>();
  
  public ApplicationContext(String basePackage) {
    String path = "./bin/" + basePackage.replace(".",  "/");
    createObject(new File(path));
    injectDependency();
  }
  
  private void injectDependency() {
    Collection<Object> objects = objPool.values();
    
    Method[] methods = null;
    Class<?> paramType = null;
    Object dependency = null;
    
    for (Object obj : objects) {
      System.out.println(obj.getClass().getName());
      
      methods = obj.getClass().getMethods();
      for (Method m : methods) {
        if (!m.getName().equals("set"))
          continue;
        
        paramType = m.getParameterTypes()[0];
        System.out.printf("--->%s(%s)\n", m.getName(), paramType.getName());
        dependency = findObjectByType(paramType);
        if (dependency == null)
          continue;
        
        try {
          m.invoke(obj, dependency);
        } catch (Exception e) {}
      }
    }
  }

  private Object findObjectByType(Class<?> paramType) {
    Collection<Object> objects = objPool.values();
    for (Object obj : objects) {
      if (paramType.isInstance(obj)) {
        return obj;
      }
    }
    return null;
  }

  private void createObject(File file) {
    if (file.isFile() && file.getName().endsWith(".class")) {
      String classNameWithPackage = file.getPath()
                                        .replace("./bin/", "")
                                        .replace(".class", "")
                                        .replace("/", ".");
      try {
        Class<?> clazz = Class.forName(classNameWithPackage);
        
        Component anno = clazz.getAnnotation(Component.class);
        
        if (anno != null) {
          Object obj = clazz.newInstance();
          if (anno.value().equals("")) {
            objPool.put(clazz.getName(), obj); 
          } else {
            objPool.put(anno.value(), obj);
          }
        }
      } catch (Exception e) {
        e.printStackTrace();
      }    
      return;
    }
    
    File[] subfiles = file.listFiles();
    for (File subfile : subfiles) {
      createObject(subfile);
    }
  }
  
  public List<Object> getBeans(Class<?> beanType) {
    ArrayList<Object> list = new ArrayList<>();
    
    Collection<Object> objects = objPool.values();
    for (Object obj : objects) {
      if (beanType.isInstance(obj)) {
        list.add(obj);
      }
    }
    return list;
  }
  
  public Object getBean(String name) {
    return objPool.get(name);
  }

}
