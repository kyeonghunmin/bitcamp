package bitcamp.pms.controller;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.sql.Date;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Scanner;

import bitcamp.pms.annotation.Component;
import bitcamp.pms.domain.Project;

@Component("project/delete.do")
public class ProjectDeleteController implements MenuController {
  private static final String filename = "project.data";
  private Scanner keyScan;

  public List<Project> load() throws Exception {
    ArrayList<Project> projects = new ArrayList<>();
    
    FileReader in0 = new FileReader(filename);
    BufferedReader in = new BufferedReader(in0);

    String line;
    String[] values;
    Project project;
    while ((line = in.readLine()) != null) {
      values = line.split(",");
      project = new Project(values[0],
                            Date.valueOf(values[1]),
                            Date.valueOf(values[2]));
      project.setState(Integer.parseInt(values[3]));
      project.setDescription(values[4]);
      projects.add(project);
    }

    in.close();
    in0.close();
    
    return projects;
  }

  public void save(List<Project> projects) throws Exception {
    FileWriter out0 = new FileWriter(filename);
    BufferedWriter out1 = new BufferedWriter(out0);
    PrintWriter out = new PrintWriter(out1);

    for (Project project : projects) {
      out.println(project);
    }

    out.close();
    out1.close();
    out0.close();
  }

  @Override
  public void init() {
  }

  @Override // 추상 메서드를 구현하는 것도 Override이다.
  public void service(Map<String,Object> paramMap) {
    keyScan = (Scanner)paramMap.get("stdin");
    try {
      List<Project> projects = this.load();
      
      System.out.print("삭제할 프로젝트 번호?");
      int no = Integer.parseInt(keyScan.nextLine());
  
      if (confirm("정말 삭제하시겠습니까?")) {
        projects.remove(no);
        System.out.println("삭제하였습니다.");
      } else {
        System.out.println("삭제를 취소하였습니다.");
      }
      
      this.save(projects);
    } catch (Exception e) {
      System.out.println("데이터 처리에 실패했습니다.);
    }
  }

  @Override
  public void destroy() {
  }



  private boolean confirm(String message) {
    while (true) {
      System.out.printf("%s(y/n) ", message);
      String input = keyScan.nextLine().toLowerCase();
      if (input.equals("y")) {
        return true;
      } else if (input.equals("n")) {
        return false;
      } else {
        System.out.println("잘못된 명령어입니다.");
      }
    }
  }
}
