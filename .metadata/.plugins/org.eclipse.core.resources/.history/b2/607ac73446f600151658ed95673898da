package bitcamp.pms.controller;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.sql.Date;
import java.util.Map;
import java.util.Scanner;

import bitcamp.pms.annotation.Component;
import bitcamp.pms.domain.Project;

@Component("project/add.do")
public class ProjectAddController implements MenuController {
  private Scanner keyScan;

  public void insert(Project project) throws Exception {
    FileWriter out0 = new FileWriter("project.data", true);
    BufferedWriter out1 = new BufferedWriter(out0);
    PrintWriter out = new PrintWriter(out1);

    out.println(project);

    out.close();
    out1.close();
    out0.close();
  }

  @Override
  public void init() {}

  @Override
  public void service(Map<String, Object> paramMap) {
    keyScan = (Scanner) paramMap.get("stdin");
    
    
    Project project = new Project();
    try {
    System.out.print("프로젝트명? ");
    project.setTitle(keyScan.nextLine());
     
    System.out.print("시작일? ");
    project.setStartDate(Date.valueOf(keyScan.nextLine()));
      
    System.out.print("종료일? ");
    project.setEndDate(Date.valueOf(keyScan.nextLine()));      
    
    System.out.print("설명? ");
    project.setDescription(keyScan.nextLine());
    } catch (Exception e) {
      throw new Exception("오류 발생!");
      
    } 
    
    if (confirm("저장하시겠습니까?")) {
      try {
        this.insert(project);        
        System.out.println("저장하였습니다.");
      } catch (Exception e) {
        System.out.println("데이터를 저장하는데 실패했습니다.");
      }
    
    } else {
      System.out.println("저장을 취소하였습니다.");
    }
  }

  @Override
  public void destroy() {}

  private boolean confirm(String message) {
    while (true) {
      System.out.printf("%s(y/n) ", message);
      String input = keyScan.nextLine().toLowerCase();
      if (input.equals("y")) {
        return true;
      } else if (input.equals("n")) {
        return false;
      } else {
        System.out.println("잘못된 명령어입니다.");
      }
    }
  }
}
